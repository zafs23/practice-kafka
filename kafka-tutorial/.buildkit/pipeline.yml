pipeline:
  stages:
    - name: run-go-tests
      steps: 
      - name: test-producer
        run: 
          cmd: ["bash", "-C", "cd producer && go test -cover -coverprofile=coverage.out ./..."]
      - name: test-consumer
        run: 
          cmd: ["bash", "-C", "cd consumer && go test -cover -coverprofile=coverage.out ./..."]
    - name: build-producer
      steps: 
      - name: build-producer-image
        frontend: dockerfile.dockerfile.v0
        inputs:
          context: producer 
          dockerfile: producer/Dockerfile
        opts:
          build-arg:
            BUILDKIT_INLINE_CACHE: "1"
        output:
          type: image
          ref: "producer:latest"
    - name: build-consumer
      steps:
      - name: build-consumer-image
        frontend: dockerfile.dockerfile.v0
        inputs:
          context: producer 
          dockerfile: consumer/Dockerfile
        opts:
          build-arg:
            BUILDKIT_INLINE_CACHE: "1"
        output:
          type: image
          ref: "consumer:latest"
    
    - name: tag-images
      steps: 
      - name: tag-producer
        run:
          cmd: ["docker", "tag", "producer:latest", "producer:v1.0.0"]
      - name: tag-consumer
        run:
          cmd: ["docker", "tag", "consumer:latest", "consumer:v1.0.0"]
    
    - name: push-producer
      steps:
      - name: push-producer-image
        source:
          type: image
          ref: "producer:latest"
        output:
          type: registry
          ref: "docker.sendgrid.net/sendgrid/kafka-tutorial"
    
    - name: push-consumer
      steps:
      - name: push-consumer-image
        source:
          type: image
          ref: "consumer:latest"
        output:
          type: registry
          ref: "docker.sendgrid.net/sendgrid/kafka-tutorial"


