

steps:

  - label: issue-version
    key: issue-version
    plugins:
      namespace/chronicle#${CHRONICLE_PLUGIN_VERSION}:
        action: issue-version

  - wait

  - label: ":golang: :docker: unit tests"
    key: unit-tests
    depends_on:
      - issue-version
    command:
      - make test

  - label: ":sparkles: :go: gocov annotate"
    key: gocov
    depends_on:
      - issue-version
    plugins:
      namespace-ops/gocov-annotate#${GOCOV_ANNOTATE_PLUGIN_VERSION}:
        arguments: -tags=unit


  - label: ':golang: go test'
    command:
      - 'make test'
  
  - label: ':golang: go vet'
    command:
      - 'make vet'
  
  - wait


  - label: "Constructing :building_construction: your :docker: image :gear:"
    key: build-docker-image
    depends_on:
      - unit-tests
      - gocov
      # - lint
      # - acceptance-tests
      # - integration-tests
    plugins:
      <namespace>-ops/docker#${DOCKER_PLUGIN_VERSION}:
        image: 'namespace/app-name'
        dockerfile: Dockerfile
        master_tag_latest: 'true'



  - block: 'Deploy to staging?'
    prompt: 'Would you like to deploy to staging?'
  - label: deploy-stage
    plugins:
    - sendgrid/chronicle#${CHRONICLE_PLUGIN_VERSION}:
        action: argo-cd-deployment
        applications:
          - 'application_name'
        clusters:
          - '*staging_mdw1*'
        helm_parameters: image.tag

  ##############################
  # Publish it
  ##############################
  - label: ':docker: publish docker latest image'
    command:
      - 'make build_prod_image'
      - 'make push_docker_latest'
    branches: 'gokubed' # If you have not pushed your changes to master yet, change this to your feature branch name
  
  - label: ':docker: publish docker versioned image'
    command:
      - 'VERSION=$${VER_DOCKER_TAG} make tag_version'
      - 'VERSION=$${VER_DOCKER_TAG} make push_docker_tagged_version'
  
  - wait

  - label: ':octocat: release'
    if: build.branch == '${BUILDKITE_PIPELINE_DEFAULT_BRANCH}'
    plugins:
      <namespace>/chronicle#${CHRONICLE_PLUGIN_VERSION}:
        action: create-release